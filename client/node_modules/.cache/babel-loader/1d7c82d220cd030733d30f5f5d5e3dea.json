{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'; //Firebase snapshot Auth\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //Sign up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n} //Google sign in\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //Email sign in\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //Sign out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //Check if user is signed in or not\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignupSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignupSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/melli/Desktop/Templates/Crown-Clothing-master/client/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signUp","payload","email","password","displayName","user","createUserWithEmailAndPassword","signInAfterSignUp","signInWithGoogle","signInWithPopup","signInWithEmail","signInWithEmailAndPassword","signOut","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onSignUpStart","SIGN_UP_START","onSignupSuccess","SIGN_UP_SUCCESS","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types'\r\n\r\nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure} from './user.actions'\r\n\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils'\r\n\r\n//Firebase snapshot Auth\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\r\n    } catch(error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n//Sign up\r\nexport function* signUp({payload: {email, password, displayName}}) {\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n          );\r\n\r\n          yield put(signUpSuccess( {user, additionalData: {displayName}}))\r\n    }catch(error) {\r\n     yield   put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload: {user, additionalData}}) {\r\n    yield  getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\n//Google sign in\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n       yield getSnapshotFromUserAuth(user)\r\n    } catch(error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n//Email sign in\r\nexport function* signInWithEmail({payload: {email, password}}) {\r\n    try {\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n       yield getSnapshotFromUserAuth(user)\r\n    }catch(error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n//Sign out\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield (put(signOutSuccess()))\r\n    } catch(error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\n//Check if user is signed in or not\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n\r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    } catch(error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\n\r\nexport function* onSignupSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignupSuccess)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}